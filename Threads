#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <string.h>

typedef struct vet{
	int *vetor;
	int top;
	int sub_vet;
}arq;

int compara(const void *a,const void * b){
    int A = *(int*)a;
    int B = *(int*)b;
    if (A > B)
        return 1;
    else
        if(A<B)
            return -1;

    return 0;
}

arq leitura(int argc,char *argv[]){

	int num_threads = *(int)argv[1];
    FILE *fp[argc-4];
    int n_atual, cont_num = 0;
    int cont_arq = argc-4;
    arq vet ;
    int j = cont_arq*1000;
	int sub_vets = j/num_threads;
    vet.vetor[j];
	

    printf("args:%d  ultimo arg: %s",argc,argv[argc-1]);
    printf("  .txt %d\n",cont_arq);
    
    for(int c = 0;c<cont_arq;c++){
        fp[c] = fopen(argv[c+2],"r");
        if(fp[c]==NULL)
            printf("arquivo vazio\n");
        else        
            while(fscanf(fp[c],"%d\n",&n_atual)!=EOF){
                vet.vetor[cont_num] = n_atual;
                cont_num++;
            }vet.top = cont_num;

        fclose(fp[c]);
    }

    return vet;
}
void escreve(arq desord,char * argv){
    FILE * saida;
    saida = fopen(argv,"w");
    for(int c = 0; c< desord.top;c++)
    fprintf(saida,"%d\n",desord.vetor[c]);

}

int separa_vet(arq vet){

}

int main(int argc, char *argv[]){
    arq desord;
    desord = leitura(argc,argv);
    qsort(desord.vetor,desord.top,sizeof(int),compara);
    escreve(desord,argv[argc-1]);

    return 0;
}
